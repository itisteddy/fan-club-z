import{u as w,_ as T}from"./index-17e3237a.js";import{c as F}from"./utils-228faac7.js";import{g as f}from"./index-a709a75c.js";const $={maxRetries:3,initialDelay:1e3,maxDelay:1e4,backoffFactor:2},v=r=>new Promise(n=>setTimeout(n,r)),x=(r,n,e)=>n>=e?!1:!!(r.name==="TypeError"&&r.message.includes("Failed to fetch")||r.name==="HTTPError"&&r.status>=500||r.name==="AbortError"||r.name==="TimeoutError"),_=(r,n)=>{const e=n.initialDelay*Math.pow(n.backoffFactor,r-1);return Math.min(e,n.maxDelay)},y=async(r,n={})=>{const{timeout:e=15e3,retryOptions:t=$,...o}=n,i={...$,...t};let s;for(let a=1;a<=i.maxRetries+1;a++)try{console.log(`🌐 API Request (attempt ${a}/${i.maxRetries+1}): ${r}`);const c=new AbortController,h=setTimeout(()=>c.abort(),e),g=await fetch(r,{...o,signal:c.signal,headers:{"Content-Type":"application/json",Accept:"application/json",...o.headers}});if(clearTimeout(h),!g.ok){const u=new Error(`HTTP error! status: ${g.status} ${g.statusText}`);throw u.name="HTTPError",u.status=g.status,u.response=g,u}return console.log(`✅ API Success (attempt ${a}): ${g.status} ${g.statusText}`),g}catch(c){if(s=c,console.warn(`⚠️ API Error (attempt ${a}):`,c.message),x(c,a,i.maxRetries)){const h=_(a,i);console.log(`🔄 Retrying in ${h}ms...`),await v(h);continue}break}throw console.error(`❌ API Failed after ${i.maxRetries+1} attempts:`,s),s},m={get:async(r,n={})=>{const e=`${f()}${r}`;return(await y(e,{method:"GET",...n})).json()},post:async(r,n,e={})=>{const t=`${f()}${r}`;return(await y(t,{method:"POST",body:n?JSON.stringify(n):void 0,...e})).json()},put:async(r,n,e={})=>{const t=`${f()}${r}`;return(await y(t,{method:"PUT",body:n?JSON.stringify(n):void 0,...e})).json()},delete:async(r,n={})=>{const e=`${f()}${r}`;return(await y(e,{method:"DELETE",...n})).json()}},P={predictions:[],trendingPredictions:[],userPredictions:[],createdPredictions:[],completedPredictions:[],userPredictionEntries:[],userCreatedPredictions:[],loading:!1,loadingMore:!1,error:null,initialized:!1,lastFetchTime:0,platformStats:null,statsLoading:!1,pagination:{page:1,limit:20,total:0,hasNext:!1,hasPrev:!1},filters:{category:"all",search:""}},U=F((r,n)=>({...P,fetchPredictions:async(e={})=>{const{page:t=1,category:o=n().filters.category,search:i=n().filters.search,append:s=!1}=e,a=Date.now(),{lastFetchTime:c,predictions:h}=n();if(!s&&t===1&&a-c<3e4&&h.length>0){console.log("📋 Using cached predictions");return}const g=s&&t>1;r({[g?"loadingMore":"loading"]:!0,error:null});try{console.log(`📡 Fetching predictions: page=${t}, category=${o}, search=${i}, append=${s}`);const u=new URLSearchParams({page:t.toString(),limit:"20",...o!=="all"&&{category:o},...i.trim()&&{search:i.trim()}}),d=await m.get(`/api/v2/predictions?${u}`,{timeout:1e4,retryOptions:{maxRetries:3}}),p=d.data||[],l=d.pagination||{};console.log(`✅ Predictions fetched successfully: ${p.length} items (${l.total} total)`),r(E=>({predictions:s?[...E.predictions,...p]:p,loading:!1,loadingMore:!1,error:null,initialized:!0,lastFetchTime:a,pagination:{page:l.page||t,limit:l.limit||20,total:l.total||0,hasNext:l.hasNext||!1,hasPrev:l.hasPrev||!1},filters:{category:o,search:i}}))}catch(u){console.error("❌ Error fetching predictions:",u),r({loading:!1,loadingMore:!1,error:u instanceof Error?u.message:"Failed to fetch predictions"})}},loadMorePredictions:async()=>{const{pagination:e,loadingMore:t}=n();if(t||!e.hasNext){console.log("📋 Load more skipped:",{loadingMore:t,hasNext:e.hasNext});return}console.log(`📋 Loading more predictions: page ${e.page+1}`),await n().fetchPredictions({page:e.page+1,append:!0})},setFilters:e=>{const o={...n().filters,...e};console.log("🔍 Setting filters:",o),r(i=>({filters:o,pagination:{...i.pagination,page:1},predictions:[]})),n().fetchPredictions({category:o.category,search:o.search})},resetPagination:()=>{console.log("🔄 Resetting pagination"),r(e=>({pagination:{...P.pagination},filters:{...P.filters},predictions:[]}))},refreshPredictions:async(e=!1)=>{const{lastFetchTime:t}=n(),o=Date.now();if(!e&&o-t<1e4){console.log("📋 Using cached predictions (refresh)");return}r(i=>({lastFetchTime:0,pagination:{...i.pagination,page:1},predictions:[]}));try{await n().fetchPredictions(),console.log("🔄 Predictions refreshed successfully")}catch(i){throw console.error("❌ Error refreshing predictions:",i),i}},fetchTrendingPredictions:async()=>{r({loading:!0});try{const e=await fetch(`${f()}/api/v2/predictions/trending`);if(!e.ok)throw new Error(`Failed to fetch trending predictions: ${e.statusText}`);const o=(await e.json()).data||[];r({trendingPredictions:o,loading:!1,error:null}),console.log("✅ Trending predictions fetched:",o.length)}catch(e){console.error("❌ Error fetching trending predictions:",e),r({loading:!1,error:e instanceof Error?e.message:"Failed to fetch trending predictions"})}},fetchUserPredictions:async e=>{r({loading:!0});try{const t=await fetch(`${f()}/api/v2/predictions/user/${e}`);if(!t.ok)throw new Error(`Failed to fetch user predictions: ${t.statusText}`);const i=(await t.json()).data||[];r({userPredictions:i,loading:!1,error:null})}catch(t){console.error("❌ Error fetching user predictions:",t),r({loading:!1,error:t instanceof Error?t.message:"Failed to fetch user predictions"})}},fetchCreatedPredictions:async e=>{r({loading:!0});try{const t=await fetch(`${f()}/api/v2/predictions/created/${e}`);if(!t.ok)throw new Error(`Failed to fetch created predictions: ${t.statusText}`);const i=(await t.json()).data||[];r({createdPredictions:i,loading:!1,error:null})}catch(t){console.error("❌ Error fetching created predictions:",t),r({loading:!1,error:t instanceof Error?t.message:"Failed to fetch created predictions"})}},fetchPredictionById:async e=>{try{console.log(`🔍 Fetching prediction by ID: ${e}`);const{predictions:t}=n(),o=t.find(c=>c.id===e);if(o&&o.options&&o.options.length>0)return console.log("✅ Found prediction in store with options:",o.title,o.options.length),o;console.log("🌐 Fetching prediction directly from API:",e);const i=await fetch(`${f()}/api/v2/predictions/${e}`);if(!i.ok)return console.error(`❌ Failed to fetch prediction ${e}:`,i.status),null;const a=(await i.json()).data;return a?(console.log("✅ Fetched prediction from API:",a.title),console.log("🔍 Prediction options:",a.options?.length||0),r(c=>({predictions:c.predictions.some(h=>h.id===e)?c.predictions.map(h=>h.id===e?a:h):[...c.predictions,a]})),a):o?(console.log("⚠️ Using existing prediction without options:",o.title),o):(console.log("❌ Prediction not found:",e),null)}catch(t){return console.error("❌ Error fetching prediction by ID:",t),null}},createPrediction:async e=>{r({loading:!0,error:null});try{const t=await fetch(`${f()}/api/v2/predictions`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Failed to create prediction: ${t.statusText}`);const o=await t.json();if(!o.data)throw new Error("Invalid response: no prediction data returned");const i=o.data;if(!i||!i.id)throw new Error("Invalid prediction data: missing required fields");r(s=>({predictions:[i,...s.predictions],loading:!1,error:null})),setTimeout(()=>{n().fetchPredictions()},100),r(s=>({userCreatedPredictions:[i,...s.userCreatedPredictions]}));try{const{user:s}=w.getState();s?.id&&setTimeout(()=>{n().fetchUserCreatedPredictions(s.id)},1e3)}catch(s){console.warn("⚠️ Failed to refresh user created predictions:",s)}return console.log("✅ Prediction created successfully:",i.id),i}catch(t){throw console.error("❌ Error creating prediction:",t),r({loading:!1,error:t instanceof Error?t.message:"Failed to create prediction"}),t}},placePrediction:async(e,t,o,i)=>{r({loading:!0,error:null});try{const{useWalletStore:s}=await T(()=>import("./index-17e3237a.js").then(p=>p.I),["assets/index-17e3237a.js","assets/ui-78f6af00.js","assets/vendor-2237fdcd.js","assets/utils-228faac7.js","assets/index-7c822fcf.css"]),a=s.getState(),c=n().predictions.find(p=>p.id===e),g=`Bet on "${c?.options.find(p=>p.id===t)?.label||"Unknown"}" in "${c?.title||"Unknown Prediction"}"`;console.log("🔄 Locking wallet funds before prediction placement..."),await a.makePrediction(o,g,e),console.log("✅ Wallet funds locked successfully");const u=await fetch(`${f()}/api/v2/predictions/${e}/entries`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({option_id:t,amount:o,user_id:i})});if(!u.ok)throw new Error(`Failed to place prediction: ${u.statusText}`);const d=await u.json();d.prediction?(console.log("📊 Updating prediction with server data:",{id:d.prediction.id,pool_total:d.prediction.pool_total,participant_count:d.prediction.participant_count,options:d.prediction.options?.length||0}),r(p=>({predictions:p.predictions.map(l=>l.id===e?{...l,...d.prediction,user_entry:d.entry}:l),userPredictions:p.userPredictions.map(l=>l.id===e?{...l,...d.prediction,user_entry:d.entry}:l),createdPredictions:p.createdPredictions.map(l=>l.id===e?{...l,...d.prediction,user_entry:d.entry}:l),loading:!1,error:null}))):r(p=>({predictions:p.predictions.map(l=>l.id===e?{...l,pool_total:d.pool_total||l.pool_total,participant_count:d.participant_count||l.participant_count,user_entry:d.entry}:l),loading:!1,error:null})),console.log("✅ Prediction placed successfully with updated data"),console.log("🔄 Refreshing wallet data after prediction placement..."),await a.initializeWallet(),console.log("✅ Wallet refreshed")}catch(s){throw console.error("❌ Error placing prediction:",s),r({loading:!1,error:s instanceof Error?s.message:"Failed to place prediction"}),s}},fetchPlatformStats:async()=>{r({statsLoading:!0});try{console.log("📊 Fetching platform stats with retry logic...");const e=await m.get("/api/v2/predictions/stats/platform",{timeout:8e3,retryOptions:{maxRetries:3}});if(e.success&&e.data)r({platformStats:e.data,statsLoading:!1}),console.log("✅ Platform stats fetched:",e.data);else throw new Error("Invalid stats response format")}catch(e){console.error("❌ Error fetching platform stats:",e);const{predictions:t}=n(),o={totalVolume:t.reduce((i,s)=>i+(s.pool_total||0),0).toFixed(2),activePredictions:t.filter(i=>i.status==="open").length,totalUsers:t.length>0?"5":"0",rawVolume:t.reduce((i,s)=>i+(s.pool_total||0),0),rawUsers:t.length>0?5:0};r({platformStats:o,statsLoading:!1}),console.log("📊 Using fallback stats:",o)}},getActivityForPrediction:e=>[],getParticipantsForPrediction:e=>[],clearError:()=>{r({error:null})},fetchUserPredictionEntries:async e=>{try{console.log("📋 Fetching user prediction entries with retry logic for:",e);const o=(await m.get(`/api/v2/prediction-entries/user/${e}`,{timeout:1e4,retryOptions:{maxRetries:3}})).data||[];r({userPredictionEntries:o}),console.log("✅ User prediction entries fetched:",o.length)}catch(t){console.error("❌ Error fetching user prediction entries:",t)}},fetchUserCreatedPredictions:async e=>{try{console.log("📋 Fetching user created predictions with retry logic for:",e);const o=(await m.get(`/api/v2/predictions/created/${e}`,{timeout:1e4,retryOptions:{maxRetries:3}})).data||[];r({userCreatedPredictions:o}),console.log("✅ User created predictions fetched:",o.length)}catch(t){console.error("❌ Error fetching user created predictions:",t)}},getUserPredictionEntries:e=>{const{userPredictionEntries:t}=n();return t.filter(o=>o.user_id===e)},getUserCreatedPredictions:e=>{const{userCreatedPredictions:t}=n();return t.filter(o=>o.creator_id===e)},updatePrediction:async(e,t)=>{try{console.log("🔄 Updating prediction:",e,t);const o=await fetch(`${f()}/api/v2/predictions/${e}`,{method:"PUT",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t)});if(!o.ok)throw new Error(`Failed to update prediction: ${o.statusText}`);const s=(await o.json()).data;r(a=>({predictions:a.predictions.map(c=>c.id===e?{...c,...s}:c),userCreatedPredictions:a.userCreatedPredictions.map(c=>c.id===e?{...c,...s}:c)})),console.log("✅ Prediction updated successfully")}catch(o){throw console.error("❌ Error updating prediction:",o),o}},deletePrediction:async e=>{try{console.log("🗑️ Deleting prediction:",e);const t=await fetch(`${f()}/api/v2/predictions/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Failed to delete prediction: ${t.statusText}`);r(o=>({predictions:o.predictions.filter(i=>i.id!==e),createdPredictions:o.createdPredictions.filter(i=>i.id!==e),userCreatedPredictions:o.userCreatedPredictions.filter(i=>i.id!==e),trendingPredictions:o.trendingPredictions.filter(i=>i.id!==e),completedPredictions:o.completedPredictions.filter(i=>i.id!==e)}));try{const{user:o}=w.getState();await n().refreshPredictions(!0),await n().fetchTrendingPredictions(),o?.id&&(await n().fetchUserCreatedPredictions(o.id),await n().fetchUserPredictionEntries(o.id))}catch(o){console.warn("⚠️ Post-delete refresh had an issue:",o)}console.log("✅ Prediction deleted successfully")}catch(t){throw console.error("❌ Error deleting prediction:",t),t}},closePrediction:async e=>{try{console.log("🔒 Closing prediction:",e);const t=await fetch(`${f()}/api/v2/predictions/${e}/close`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`Failed to close prediction: ${t.statusText}`);const i=(await t.json()).data;r(s=>({predictions:s.predictions.map(a=>a.id===e?{...a,status:"closed",...i}:a),userCreatedPredictions:s.userCreatedPredictions.map(a=>a.id===e?{...a,status:"closed",...i}:a)})),console.log("✅ Prediction closed successfully")}catch(t){throw console.error("❌ Error closing prediction:",t),t}},fetchPredictionActivity:async e=>{try{console.log("📋 Fetching prediction activity:",e);const t=await fetch(`${f()}/api/v2/predictions/${e}/activity`,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});return t.ok?(await t.json()).data||[]:(console.warn(`Activity endpoint not available: ${t.statusText}`),[])}catch(t){return console.warn("Activity endpoint not implemented yet:",t),[]}},fetchPredictionParticipants:async e=>{try{console.log("📋 Fetching prediction participants:",e);const t=await fetch(`${f()}/api/v2/predictions/${e}/participants`,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});return t.ok?(await t.json()).data||[]:(console.warn(`Participants endpoint not available: ${t.statusText}`),[])}catch(t){return console.warn("Participants endpoint not implemented yet:",t),[]}},reset:()=>{r(P)}}));export{U as u};
