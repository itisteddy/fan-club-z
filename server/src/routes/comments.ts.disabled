import express from 'express';
import { supabase } from '../config/database';

const router = express.Router();

// Simple logger function
const log = (message: string, ...args: any[]) => {
  console.log(`[COMMENTS] ${new Date().toISOString()} - ${message}`, ...args);
};

// Test route to verify the router is working
router.get('/test', (req, res) => {
  log('Comment test route hit');
  res.json({ 
    message: 'Comment routes are working!', 
    timestamp: new Date().toISOString(),
    method: req.method,
    path: req.path,
    baseUrl: req.baseUrl,
    originalUrl: req.originalUrl
  });
});

// Simple health check for comments
router.get('/health', (req, res) => {
  res.json({
    status: 'Comment service is running',
    timestamp: new Date().toISOString(),
    routes: [
      'GET /test',
      'GET /health', 
      'GET /predictions/:predictionId/comments',
      'POST /predictions/:predictionId/comments',
      'POST /comments/:commentId/like',
      'PUT /comments/:commentId',
      'DELETE /comments/:commentId'
    ]
  });
});

// Get comments for a prediction
router.get('/predictions/:predictionId/comments', async (req, res) => {
  try {
    const { predictionId } = req.params;
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 20;
    const offset = (page - 1) * limit;
    
    log(`Fetching comments for prediction ${predictionId}, page ${page}, limit ${limit}`);
    
    // Get comments from database
    const { data: comments, error, count } = await supabase
      .from('comments')
      .select(`
        *,
        user:users(id, username, full_name, avatar_url, is_verified)
      `, { count: 'exact' })
      .eq('prediction_id', predictionId)
      .is('parent_comment_id', null) // Only top-level comments
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1);
    
    if (error) {
      log('Database error:', error);
      return res.status(500).json({ 
        success: false,
        error: 'Database error',
        details: error.message
      });
    }
    
    log(`Successfully returning ${comments?.length || 0} comments from database`);

    res.json({
      comments: comments || [],
      hasMore: count ? (offset + limit) < count : false,
      total: count || 0,
      page,
      limit,
      success: true,
      message: 'Comments fetched from database'
    });

  } catch (error) {
    log('Error in get comments route:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Create a new comment
router.post('/predictions/:predictionId/comments', async (req, res) => {
  try {
    const { predictionId } = req.params;
    const { content, parent_comment_id } = req.body;
    
    log(`Creating comment for prediction ${predictionId}`);
    log('Request body:', JSON.stringify(req.body));

    // Basic validation
    if (!content || typeof content !== 'string' || content.trim().length === 0) {
      log('Invalid content provided:', content);
      return res.status(400).json({ 
        success: false,
        error: 'Comment content is required and must be a non-empty string' 
      });
    }

    if (content.length > 500) {
      log('Content too long:', content.length);
      return res.status(400).json({ 
        success: false,
        error: 'Comment too long (max 500 characters)' 
      });
    }

    // Get user info from request (in production, this would come from auth middleware)
    const userInfo = req.body.user || {
      id: 'current-user',
      username: 'Anonymous',
      full_name: 'Anonymous User',
      avatar_url: null,
      is_verified: false
    };

    // Insert comment into database
    const { data: newComment, error } = await supabase
      .from('comments')
      .insert({
        content: content.trim(),
        user_id: userInfo.id,
        prediction_id: predictionId,
        parent_comment_id: parent_comment_id || null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select(`
        *,
        user:users(id, username, full_name, avatar_url, is_verified)
      `)
      .single();

    if (error) {
      log('Database error creating comment:', error);
      return res.status(500).json({ 
        success: false,
        error: 'Failed to create comment',
        details: error.message
      });
    }

    log(`Comment persisted in database: ${newComment.id}`);

    res.status(201).json(newComment);

  } catch (error) {
    log('Error in create comment route:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});



// Like/unlike a comment
router.post('/comments/:commentId/like', async (req, res) => {
  try {
    const { commentId } = req.params;
    
    log(`Like toggled for comment ${commentId}`);

    // Return default values
    const liked = Math.random() > 0.5; // Random for demo
    const likes_count = Math.floor(Math.random() * 10);

    log(`Like result: liked=${liked}, likes_count=${likes_count}`);

    res.json({ 
      success: true,
      liked, 
      likes_count,
      message: 'Like functionality working!'
    });

  } catch (error) {
    log('Error in like comment route:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Edit comment endpoint
router.put('/comments/:commentId', async (req, res) => {
  try {
    const { commentId } = req.params;
    const { content } = req.body;
    
    log(`Editing comment ${commentId} with content: ${content}`);
    
    // Basic validation
    if (!content || typeof content !== 'string' || content.trim().length === 0) {
      return res.status(400).json({ 
        success: false,
        error: 'Comment content is required' 
      });
    }

    if (content.length > 500) {
      return res.status(400).json({ 
        success: false,
        error: 'Comment too long (max 500 characters)' 
      });
    }

    // Update in memory
    let found = false;
    for (const predictionId in commentsStorage) {
      const comment = findCommentById(commentsStorage[predictionId], commentId);
      if (comment) {
        comment.content = content.trim();
        comment.updated_at = new Date().toISOString();
        comment.is_edited = true;
        found = true;
        break;
      }
    }

    if (found) {
      res.json({
        success: true,
        id: commentId,
        content: content.trim(),
        updated_at: new Date().toISOString(),
        is_edited: true,
        message: 'Comment updated in memory'
      });
    } else {
      res.status(404).json({
        success: false,
        error: 'Comment not found'
      });
    }

  } catch (error) {
    log('Error in edit comment route:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Delete comment endpoint
router.delete('/comments/:commentId', async (req, res) => {
  try {
    const { commentId } = req.params;
    
    log(`Deleting comment ${commentId}`);

    // Delete from memory
    let found = false;
    for (const predictionId in commentsStorage) {
      const comments = commentsStorage[predictionId];
      
      // Remove from top-level comments
      const topLevelIndex = comments.findIndex(c => c.id === commentId);
      if (topLevelIndex !== -1) {
        comments.splice(topLevelIndex, 1);
        found = true;
        break;
      }
      
      // Remove from replies
      for (const comment of comments) {
        if (comment.replies) {
          const replyIndex = comment.replies.findIndex((r: any) => r.id === commentId);
          if (replyIndex !== -1) {
            comment.replies.splice(replyIndex, 1);
            comment.replies_count = comment.replies.length;
            found = true;
            break;
          }
        }
      }
      
      if (found) break;
    }

    if (found) {
      res.json({
        success: true,
        message: 'Comment deleted from memory'
      });
    } else {
      res.status(404).json({
        success: false,
        error: 'Comment not found'
      });
    }

  } catch (error) {
    log('Error in delete comment route:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get comment replies (for lazy loading)
router.get('/comments/:commentId/replies', async (req, res) => {
  try {
    const { commentId } = req.params;
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    
    log(`Fetching replies for comment ${commentId}, page ${page}, limit ${limit}`);

    // Find the comment and return its replies
    let replies: any[] = [];
    for (const predictionId in commentsStorage) {
      const comment = findCommentById(commentsStorage[predictionId], commentId);
      if (comment && comment.replies) {
        replies = comment.replies;
        break;
      }
    }

    res.json({
      data: replies,
      pagination: {
        page,
        limit,
        total: replies.length,
        totalPages: Math.ceil(replies.length / limit),
        hasNext: false,
        hasPrev: false
      }
    });

  } catch (error) {
    log('Error in get replies route:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Debug endpoint to view stored comments
router.get('/debug/storage', (req, res) => {
  res.json({
    storage: commentsStorage,
    total_predictions: Object.keys(commentsStorage).length,
    total_comments: Object.values(commentsStorage).reduce((sum, comments) => sum + comments.length, 0)
  });
});

// Add route-level logging middleware
router.use((req, res, next) => {
  log(`Incoming request: ${req.method} ${req.originalUrl}`);
  log(`Base URL: ${req.baseUrl}, Path: ${req.path}`);
  log(`Params:`, req.params);
  log(`Query:`, req.query);
  next();
});

// Catch-all for debugging - IMPORTANT: This should be LAST
router.all('*', (req, res) => {
  log(`❌ UNHANDLED ROUTE: ${req.method} ${req.originalUrl}`);
  log('Request details:');
  log('- Base URL:', req.baseUrl);
  log('- Path:', req.path);
  log('- Original URL:', req.originalUrl);
  log('- Method:', req.method);
  log('- Params:', req.params);
  log('- Query:', req.query);
  log('Available routes:');
  log('- GET /test');
  log('- GET /health');
  log('- GET /predictions/:predictionId/comments');
  log('- POST /predictions/:predictionId/comments');
  log('- POST /comments/:commentId/like');
  log('- PUT /comments/:commentId');
  log('- DELETE /comments/:commentId');
  log('- GET /comments/:commentId/replies');
  log('- GET /debug/storage');
  
  res.status(404).json({
    success: false,
    error: `Route not found: ${req.method} ${req.originalUrl}`,
    baseUrl: req.baseUrl,
    path: req.path,
    method: req.method,
    availableRoutes: [
      'GET /test',
      'GET /health',
      'GET /predictions/:predictionId/comments',
      'POST /predictions/:predictionId/comments',
      'POST /comments/:commentId/like',
      'PUT /comments/:commentId',
      'DELETE /comments/:commentId',
      'GET /comments/:commentId/replies',
      'GET /debug/storage'
    ]
  });
});

export default router;
